/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */

/*
 Copyright (C) 2016 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
*/

//#if defined(HAVE_CONFIG_H)     // Dynamically created by configure
//    #include <qlo/config.hpp>
//#endif
#include <qlo/conversions/all.hpp>
#include <qlo/objects/objmanual_termstructures.hpp>
#include <qlo/objects/objmanual_quotes.hpp>
#include <ql/utilities/dataparsers.hpp>
#include <ql/time/period.hpp>
#include <ql/quotes/all.hpp>
#include <boost/algorithm/string/case_conv.hpp>

QuantLib::Period QuantLibAddin::Get<std::string, QuantLib::Period>::operator()(const std::string &in) {
    // This was the functionality in the old build:
    //ret = QuantLib::PeriodParser::parse(in);
    //ret.normalize();
    // In the old build the functionality below was found in the ctor of QuantLibAddin::Euribor.
    // Now we use it here for all autogenerated conversions, is that correct?
    QuantLib::Period ret;
    std::string p = boost::algorithm::to_upper_copy(in);
    if ("SW"==p)
        ret = 1*QuantLib::Weeks;
    else {
        ret = QuantLib::PeriodParser::parse(p);
        ret.normalize();
    }
    return ret;
}
template <class QuantLibAddinQuote, class QuantLibQuote>
boost::shared_ptr<QuantLibQuote> getQuote(const std::string &in) {
    RP_GET_OBJECT(objectId, in, reposit::Object)
    return QuantLibAddin::CoerceQuote<QuantLibAddinQuote, QuantLibQuote>()(objectId);
}

boost::shared_ptr<QuantLib::SimpleQuote>
QuantLibAddin::Get<std::string, boost::shared_ptr<QuantLib::SimpleQuote> >::operator()(const std::string &in) {
    return getQuote<QuantLibAddin::SimpleQuote, QuantLib::SimpleQuote>(in);
}

boost::shared_ptr<QuantLib::FuturesConvAdjustmentQuote>
QuantLibAddin::Get<std::string, boost::shared_ptr<QuantLib::FuturesConvAdjustmentQuote> >::operator()(const std::string &in) {
    return getQuote<QuantLibAddin::FuturesConvAdjustmentQuote, QuantLib::FuturesConvAdjustmentQuote>(in);
}

boost::shared_ptr<QuantLib::LastFixingQuote>
QuantLibAddin::Get<std::string, boost::shared_ptr<QuantLib::LastFixingQuote> >::operator()(const std::string &in) {
    return getQuote<QuantLibAddin::LastFixingQuote, QuantLib::LastFixingQuote>(in);
}

QuantLib::Handle<QuantLib::YieldTermStructure>
QuantLibAddin::Get<std::string, QuantLib::Handle<QuantLib::YieldTermStructure> >::operator()(
    const std::string &in,
    const QuantLib::Handle<QuantLib::YieldTermStructure> &defaultValue) {
    RP_GET_OBJECT_DEFAULT(objectId, in, reposit::Object)
    return QuantLibAddin::CoerceHandle<
        QuantLibAddin::YieldTermStructure,
        QuantLib::YieldTermStructure>()(
            objectId, defaultValue);
}
